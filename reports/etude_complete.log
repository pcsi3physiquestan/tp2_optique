Traceback (most recent call last):
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/ubuntu/miniconda3/envs/jupybook/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""
On importe pour vous les biblioth√®ques scientifiques utiles.
"""
import numpy as np
import numpy.random as rd
import matplotlib.pyplot as plt


"""
Commencer par entrer les r√©sultats de mesurage pour les trois mesurandes directes
"""
x1_mes = 0  # Commentaire √† remplacer par la descritpion de x1
x2_mes = 0  # Commentaire √† remplacer par la descritpion de x2
x3_mes = 0  # Commentaire √† remplacer par la descritpion de x3


"""
Pour chaque source d'incertitude cr√©er une ligne ou vous entrez la valeur de de la demi-largeur de la distribution uniforme.
"""
x1_d1 = 0  # D√©crire ici la source d'incertitude associ√©e
x1_d2 = 0  # D√©crire ici la source d'incertitude associ√©e


"""
Cr√©er les √©chantillons pour chaque source d'incertitude.
On rappelle que pour un tirage de N valeurs suivant une loi uniforme centr√©e en 0 et de demi-largeur dt, la fonction est 
rd.uniform(-dt, dt, N)
"""
N = 100000
x1_d1_sim = rd.uniform(-x1_d1, x1_d1, N)
x1_d2_sim = rd.uniform(-x1_d2, x1_d2, N)


"""
Cr√©er √† partir des √©chantillons pr√©c√©dents, les √©chantillons simul√©s des mesurandes x1, x2, x3
(ne pas oublier le r√©sultat de mesurage).

Cr√©er ensuite les √©chantillons simul√©s de OA, OA' puis f'.
"""
x1_sim = 0
x2_sim = 0
x3_sim = 0
OA_sim = 0
OA1_sim = 0
f1_sim = 0

"""
On affiche pour vous les r√©sultats pour chaque grandeur
"""
print("R√©sultat de mesurage pour x1 (sans unit√©s) : " + str(np.mean(x1_sim)))
print("R√©sultat de mesurage pour u(x1) (sans unit√©s) : " + str(np.str(x1_sim, ddof=1)))

print("R√©sultat de mesurage pour x2 (sans unit√©s) : " + str(np.mean(x2_sim)))
print("R√©sultat de mesurage pour u(x2) (sans unit√©s) : " + str(np.str(x2_sim, ddof=1)))

print("R√©sultat de mesurage pour x3 (sans unit√©s) : " + str(np.mean(x3_sim)))
print("R√©sultat de mesurage pour u(x3) (sans unit√©s) : " + str(np.str(x3_sim, ddof=1)))

print("R√©sultat de mesurage pour OA (sans unit√©s) : " + str(np.mean(OA_sim)))
print("R√©sultat de mesurage pour u(OA) (sans unit√©s) : " + str(np.str(OA_sim, ddof=1)))

print("R√©sultat de mesurage pour OA1 (sans unit√©s) : " + str(np.mean(OA1_sim)))
print("R√©sultat de mesurage pour u(OA1) (sans unit√©s) : " + str(np.str(OA1_sim, ddof=1)))


"""
Repr√©senter graphiquement l'histogramme des valeurs simul√©es.
On donne le squelette pour le trac√© du graphique. Ajouter/modifier les instructions.
"""
f, ax = plt.subplots()
f.suptitle("Simulation de Monte-Carlo pour f'")
ax.set_xlabel("")  # Ajouter une l√©gende aux abscisses (grandeur et unit√©)

# Mettre ici l'instruction tra√ßant l'histogramme des valeurs.

plt.show()

"""
Calculer et afficher le r√©sultat de mesurage de f' et son incertitude-type.
"""

f1 = 0  # Entrer la formule ad√©quate pour le calcul de f'
f1_u = 0  # Entrer la formule ad√©quate pour le calcul de l'incertitude sur f'

print("R√©sultat de mesurage : " + str(f1))
print("Incertitude-type : " + str(f1_u))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-1-c0204955f322>[0m in [0;36m<module>[0;34m[0m
[1;32m     49[0m """
[1;32m     50[0m [0mprint[0m[0;34m([0m[0;34m"R√©sultat de mesurage pour x1 (sans unit√©s) : "[0m [0;34m+[0m [0mstr[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mmean[0m[0;34m([0m[0mx1_sim[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 51[0;31m [0mprint[0m[0;34m([0m[0;34m"R√©sultat de mesurage pour u(x1) (sans unit√©s) : "[0m [0;34m+[0m [0mstr[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mstr[0m[0;34m([0m[0mx1_sim[0m[0;34m,[0m [0mddof[0m[0;34m=[0m[0;36m1[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     52[0m [0;34m[0m[0m
[1;32m     53[0m [0mprint[0m[0;34m([0m[0;34m"R√©sultat de mesurage pour x2 (sans unit√©s) : "[0m [0;34m+[0m [0mstr[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mmean[0m[0;34m([0m[0mx2_sim[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mTypeError[0m: 'ddof' is an invalid keyword argument for str()
TypeError: 'ddof' is an invalid keyword argument for str()

